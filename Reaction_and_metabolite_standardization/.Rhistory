rxn_kegg_web <- newRxn_kegg_eggnog[str_detect(newRxn_kegg_eggnog$type, "kegg"), ]
rxn_eggnog_web <- newRxn_kegg_eggnog[str_detect(newRxn_kegg_eggnog$type, "eggnog"), ]
kegg_web <- unique(rxn_kegg_web$MNXID)
eggnog_web <- unique(rxn_eggnog_web$MNXID)
RAVEN_kegg <- unique(newRxn_kegg$MNXID)
RAVEN_biocyc <- unique(newRxn_biocyc$MNXID)
# merge the rxn from different source
union_rxn <- unique(c(kegg_web, eggnog_web, RAVEN_kegg, RAVEN_biocyc))
union_rxn_ann <- data.frame(rxnID = union_rxn, stringsAsFactors = FALSE)
union_rxn_ann$source <- NA
union_rxn_ann$panID_kegg_web <- NA
union_rxn_ann$panID_eggnog_web <- NA
union_rxn_ann$panID_RAVEN_kegg <- NA
union_rxn_ann$panID_RAVEN_biocyc <- NA
union_rxn_ann$panID_inter <- NA # the interaction panID sets from at least two different sources
union_rxn_ann$panID_union <- NA # the union panID sets from different sources
# summarize the panID
# integrate the source
E1 <- union_rxn_ann$rxnID %in% kegg_web
E2 <- union_rxn_ann$rxnID %in% eggnog_web
E3 <- union_rxn_ann$rxnID %in% RAVEN_kegg
E4 <- union_rxn_ann$rxnID %in% RAVEN_biocyc
source_merge <- vector()
for (i in 1:length(E1)) {
if (E1[i]) {
s1 <- "kegg_web"
} else {
s1 <- NA
}
if (E2[i]) {
s2 <- "eggnog_web"
} else {
s2 <- NA
}
if (E3[i]) {
s3 <- "RAVEN_kegg"
} else {
s3 <- NA
}
if (E4[i]) {
s4 <- "RAVEN_biocyc"
} else {
s4 <- NA
}
s <- paste(s1, s2, s3, s4, sep = ";")
source_merge <- c(source_merge, s)
}
source_merge <- str_replace_all(source_merge, "NA;", "")
source_merge <- str_replace_all(source_merge, ";NA", "")
union_rxn_ann$source <- source_merge
# union_rxn_ann0 <- filter(union_rxn_ann, balance_MNX=='true') # 1275 balanced reactions
# union_rxn_ann0$source_num <- str_count(union_rxn_ann0$source, ";") # 605 reactions from at least two evidences
union_rxn_ann$panID_kegg_web <- getMultipleReactionFormula(rxn_kegg_web$panID_kegg, rxn_kegg_web$MNXID, union_rxn_ann$rxnID)
union_rxn_ann$panID_eggnog_web <- getMultipleReactionFormula(rxn_eggnog_web$panID_eggnog, rxn_eggnog_web$MNXID, union_rxn_ann$rxnID)
union_rxn_ann$panID_RAVEN_kegg <- getMultipleReactionFormula(newRxn_kegg$GENE.ASSOCIATION, newRxn_kegg$MNXID, union_rxn_ann$rxnID)
union_rxn_ann$panID_RAVEN_biocyc <- getMultipleReactionFormula(newRxn_biocyc$GENE.ASSOCIATION, newRxn_biocyc$MNXID, union_rxn_ann$rxnID)
# unify the panID for each reactions
g_union_all <- vector()
g_inter_all <- vector()
for (i in 1:nrow(union_rxn_ann)) {
print(i)
g1 <- union_rxn_ann$panID_kegg_web[i]
g1 <- unlist(str_split(g1, ";"))
g1 <- str_trim(g1, side = "both")
g2 <- union_rxn_ann$panID_eggnog_web[i]
g2 <- unlist(str_split(g2, ";"))
g2 <- str_trim(g2, side = "both")
g3 <- union_rxn_ann$panID_RAVEN_kegg[i]
g3 <- unlist(str_split(g3, " or "))
g3 <- str_trim(g3, side = "both")
g4 <- union_rxn_ann$panID_RAVEN_biocyc[i]
g4 <- unlist(str_split(g4, " or "))
g4 <- str_trim(g4, side = "both")
g_union <- Reduce(union, list(g1, g2, g3, g4)) # the union panID sets from different sources
g_union <- g_union[!is.na(g_union)]
g_union_string <- paste(g_union, collapse = ";")
e1 <- g_union %in% g1
e2 <- g_union %in% g2
e3 <- g_union %in% g3
e4 <- g_union %in% g4
e_add <- e1 + e2 + e3 + e4
g_inter <- g_union[which(e_add >= 2)] # here we choose panID from at least two sources
if (length(g_inter)) {
g_inter_string <- paste(g_inter, collapse = ";")
} else {
g_inter_string <- NA
}
g_union_all <- c(g_union_all, g_union_string)
g_inter_all <- c(g_inter_all, g_inter_string)
}
union_rxn_ann$panID_inter <- g_inter_all
union_rxn_ann$panID_union <- g_union_all
return(union_rxn_ann)
}
union_rxn_mnx <- getRxnInfFromMNX(union_rxn_mnx, union_rxn_mnx$rxnID)
union_rxn_mnx <- getRxnReversibilty(rxn_frame=union_rxn_mnx, MNXID_list=union_rxn_mnx$rxnID)
# metabolites unify based on MNXID and MNX equation
rxn_final0 <- data.frame(ID0=union_rxn_mnx$rxnID, Equation=union_rxn_mnx$Equation_MNX)
rxn_met <- splitRxnToMetabolite(rxn_final0, sep0 = " = ")
met_mnx <- metStandard.mnx(rxn_met, rxn_met$MetID)
# further refine the rxn and metabolites
rxn_unbalance <- union_rxn_mnx[union_rxn_mnx$balance_MNX =='false' | union_rxn_mnx$balance_MNX =='ambiguous' | union_rxn_mnx$balance_MNX =='NA', ]
met_m_remove <- met_mnx[str_detect(met_mnx$Description, "^a ") | str_detect(met_mnx$Description, "protein") |str_detect(met_mnx$Description, "^an "),]
rxn_rm <- unique(c(rxn_unbalance$rxnID, met_m_remove$ID))
# get the refind the rxn with MNXID
union_rxn_mnx_refine <- union_rxn_mnx[!(union_rxn_mnx$rxnID %in%rxn_rm), ]
rxn_remove_all <- setdiff(union_rxn_mnx$rxnID, union_rxn_mnx_refine$rxnID)
union_rxn_mnx <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'MNXR'),]
union_rxn_mnx <- getRxnInfFromMNX(union_rxn_mnx, union_rxn_mnx$rxnID)
union_rxn_mnx <- getRxnReversibilty(rxn_frame=union_rxn_mnx, MNXID_list=union_rxn_mnx$rxnID)
# metabolites unify based on MNXID and MNX equation
rxn_final0 <- data.frame(ID0=union_rxn_mnx$rxnID, Equation=union_rxn_mnx$Equation_MNX)
rxn_met <- splitRxnToMetabolite(rxn_final0, sep0 = " = ")
met_mnx <- metStandard.mnx(rxn_met, rxn_met$MetID)
# further refine the rxn and metabolites
rxn_unbalance <- union_rxn_mnx[union_rxn_mnx$balance_MNX =='false' | union_rxn_mnx$balance_MNX =='ambiguous' | union_rxn_mnx$balance_MNX =='NA', ]
met_m_remove <- met_mnx[str_detect(met_mnx$Description, "^a ") | str_detect(met_mnx$Description, "protein") |str_detect(met_mnx$Description, "^an "),]
rxn_rm <- unique(c(rxn_unbalance$rxnID, met_m_remove$ID))
# get the refind the rxn with MNXID
union_rxn_mnx_refine <- union_rxn_mnx[!(union_rxn_mnx$rxnID %in%rxn_rm), ]
rxn_remove_all <- setdiff(union_rxn_mnx$rxnID, union_rxn_mnx_refine$rxnID)
# Classification and standardization of the new reactions from different sources: RAVEN, kegg and eggnog
# Revised by Hongzhong 2019-8-15
# load library
source('function_general.R')
# merge the panID and reactionID from RAVEN_kegg, RAVEN_biocyc, kegg_web and eggnog_web
union_rxn_ann0 <- mergePanID()
# Classification and standardization of the new reactions from different sources: RAVEN, kegg and eggnog
# Revised by Hongzhong 2019-8-15
# load library
source('function_general.R')
# merge the panID and reactionID from RAVEN_kegg, RAVEN_biocyc, kegg_web and eggnog_web
union_rxn_ann0 <- mergePanID()
View(union_rxn_ann0)
# we can split reactions into three types: with MNXID, with keggID, with biocycID
# mnx
union_rxn_mnx <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'MNXR'),]
union_rxn_mnx <- getRxnInfFromMNX(union_rxn_mnx, union_rxn_mnx$rxnID)
View(union_rxn_mnx)
# kegg
# for the rxn with keegID we firstly find rheaID to check the reversibility
# for the keggID which can't found MNXID, it difficult to find the biocycID
# so we only choose the keggid with rheaID
# then we can standardize the metabolites based on the reaction annotation from Rhea
union_rxn_kegg <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'kegg'),]
union_rxn_kegg <- getRxnInfFromKEGG(union_rxn_kegg, union_rxn_kegg$rxnID)
# biocyc
# id_mapping_metacyc <- read_excel("data/All_compounds_of_MetaCyc.xlsx")
union_rxn_biocyc <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'metacyc'),]
union_rxn_biocyc <- getBiocycRxnInfFromBiocycID(union_rxn_biocyc, union_rxn_biocyc$rxnID)
View(union_rxn_biocyc)
# kegg
# for the rxn with keegID we firstly find rheaID to check the reversibility
# for the keggID which can't found MNXID, it difficult to find the biocycID
# so we only choose the keggid with rheaID
# then we can standardize the metabolites based on the reaction annotation from Rhea
union_rxn_kegg <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'kegg'),]
union_rxn_kegg <- getRxnInfFromKEGG(union_rxn_kegg, union_rxn_kegg$rxnID)
union_rxn_kegg <- getRheaRxnInfFromKEGGID(union_rxn_kegg, union_rxn_kegg$rxnID)
union_rxn_kegg_refine <- union_rxn_kegg[!is.na(union_rxn_kegg$formula_rhea), ]
# establish mapping between met and each rxnID
rxn_kegg <- union_rxn_kegg_refine[, c("rxnID", "equation_rhea")]
colnames(rxn_kegg) <- c("ID0", "Equation")
rxn_kegg1 <- splitRxnToMetabolite(reationFrame = rxn_kegg, sep0 = "=", source0 = "kegg")
# find MNXID of metabolite based on keggid
chem_xref <- read_tsv("data/chem_xref.tsv")
chem_xref_chebi <- chem_xref[str_detect(chem_xref$XREF,'chebi'),]
chem_xref_chebi$XREF <- str_replace_all(chem_xref_chebi$XREF, "chebi:", "CHEBI:")
rxn_kegg1$MetID <- getMultipleReactionFormula(chem_xref_chebi$MNX_ID, chem_xref_chebi$XREF, rxn_kegg1$MetID)
met_kegg <- rxn_kegg1
View(met_kegg)
union_rxn_kegg_refine$rxnID
met_kegg$ID
met_kegg_refine <- met_kegg[met_kegg$ID %in% union_rxn_kegg_refine$rxnID, ]
View(met_kegg_refine)
View(rxn_kegg)
# Classification and standardization of the new reactions from different sources: RAVEN, kegg and eggnog
# Revised by Hongzhong 2019-8-15
# load library
source('function_general.R')
# merge the panID and reactionID from RAVEN_kegg, RAVEN_biocyc, kegg_web and eggnog_web
union_rxn_ann0 <- mergePanID()
# load library
source('function_general.R')
# Classification and standardization of the new reactions from different sources: RAVEN, kegg and eggnog
# Revised by Hongzhong 2019-8-15
# load library
source('function_general.R')
# merge the panID and reactionID from RAVEN_kegg, RAVEN_biocyc, kegg_web and eggnog_web
union_rxn_ann0 <- mergePanID()
View(union_rxn_ann0)
# we can split reactions into three types: with MNXID, with keggID, with biocycID
# mnx
union_rxn_mnx <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'MNXR'),]
union_rxn_mnx <- getRxnInfFromMNX(union_rxn_mnx, union_rxn_mnx$rxnID)
View(union_rxn_mnx)
View(union_rxn_ann0)
# biocyc
# id_mapping_metacyc <- read_excel("data/All_compounds_of_MetaCyc.xlsx")
union_rxn_biocyc <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'metacyc'),]
# kegg
# for the rxn with keegID we firstly find rheaID to check the reversibility
# for the keggID which can't found MNXID, it difficult to find the biocycID
# so we only choose the keggid with rheaID
# then we can standardize the metabolites based on the reaction annotation from Rhea
union_rxn_kegg <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'kegg'),]
union_rxn_mnx <- getRxnInfFromMNX(union_rxn_mnx, union_rxn_mnx$rxnID)
union_rxn_mnx <- getRxnReversibilty(rxn_frame=union_rxn_mnx, MNXID_list=union_rxn_mnx$rxnID)
# establish mapping between met and each rxnID
# metabolites unify based on MNXID and MNX equation
rxn_final0 <- data.frame(ID0=union_rxn_mnx$rxnID, Equation=union_rxn_mnx$Equation_MNX)
rxn_met <- splitRxnToMetabolite(rxn_final0, sep0 = " = ")
met_mnx <- metStandard.mnx(rxn_met, rxn_met$MetID)
# further refine the rxn reversiblity information for the reactions with MNXID
result_refine <- refineRxnReversiblity(rxn_ini = union_rxn_mnx, met_ini = met_mnx)
union_rxn_mnx <- result_refine[['rxn']]
met_mnx <- result_refine[['met']]
# further refine the rxn and metabolites
rxn_unbalance <- union_rxn_mnx[union_rxn_mnx$balance_MNX =='false' | union_rxn_mnx$balance_MNX =='ambiguous' | union_rxn_mnx$balance_MNX =='NA', ]
met_m_remove <- met_mnx[str_detect(met_mnx$Description, "^a ") | str_detect(met_mnx$Description, "protein") |str_detect(met_mnx$Description, "^an "),]
rxn_rm <- unique(c(rxn_unbalance$rxnID, met_m_remove$ID))
# get the refind the rxn with MNXID
union_rxn_mnx_refine <- union_rxn_mnx[!(union_rxn_mnx$rxnID %in%rxn_rm), ]
rxn_remove_all <- setdiff(union_rxn_mnx$rxnID, union_rxn_mnx_refine$rxnID)
met_mnx <- met_mnx[!(met_mnx$ID %in% rxn_remove_all),]
# biocyc
# id_mapping_metacyc <- read_excel("data/All_compounds_of_MetaCyc.xlsx")
union_rxn_biocyc <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'metacyc'),]
union_rxn_biocyc <- getBiocycRxnInfFromBiocycID(union_rxn_biocyc, union_rxn_biocyc$rxnID)
# establish mapping between met and each rxnID
met_biocyc <- metStandard.biocyc (rxn_inf = union_rxn_biocyc)
# here we further remove rxns which contains met without mnxid or contains a general metabolite formula
met_b_remove <- met_biocyc[is.na(met_biocyc$MetID) | str_detect(met_biocyc$Description, "^a "),]
rxn_b_remove <- unique(met_b_remove$ID)
union_rxn_biocyc_refine <- union_rxn_biocyc[!(union_rxn_biocyc$rxnID %in%rxn_b_remove), ]
met_biocyc <- met_biocyc[!(met_biocyc$ID %in%rxn_b_remove), ]
# kegg
# for the rxn with keegID we firstly find rheaID to check the reversibility
# for the keggID which can't found MNXID, it difficult to find the biocycID
# so we only choose the keggid with rheaID
# then we can standardize the metabolites based on the reaction annotation from Rhea
union_rxn_kegg <- union_rxn_ann0[str_detect(union_rxn_ann0$rxnID, 'kegg'),]
union_rxn_kegg <- getRxnInfFromKEGG(union_rxn_kegg, union_rxn_kegg$rxnID)
union_rxn_kegg <- getRheaRxnInfFromKEGGID(union_rxn_kegg, union_rxn_kegg$rxnID)
union_rxn_kegg_refine <- union_rxn_kegg[!is.na(union_rxn_kegg$formula_rhea), ]
# establish mapping between met and each rxnID
rxn_kegg <- union_rxn_kegg_refine[, c("rxnID", "equation_rhea")]
colnames(rxn_kegg) <- c("ID0", "Equation")
rxn_kegg1 <- splitRxnToMetabolite(reationFrame = rxn_kegg, sep0 = "=", source0 = "kegg")
# find MNXID of metabolite based on keggid
chem_xref <- read_tsv("data/chem_xref.tsv")
chem_xref_chebi <- chem_xref[str_detect(chem_xref$XREF,'chebi'),]
chem_xref_chebi$XREF <- str_replace_all(chem_xref_chebi$XREF, "chebi:", "CHEBI:")
rxn_kegg1$MetID <- getMultipleReactionFormula(chem_xref_chebi$MNX_ID, chem_xref_chebi$XREF, rxn_kegg1$MetID)
met_kegg <- rxn_kegg1
# step 3
# possible we can remove some reactions based on the concept of dead end metabolites
# merge the new rxns with yeast8
# check the number of reactions connected with each each metabolite
# then we can regard the metabolites with only one reaction as the dead end metabolites if no exchange reactions is connected further
rxn_met_yeast8 <- rxnMetMappingYeast8()
# combine the rxn_met_new with rxn_met_yeast8
rxn_met_new <- met_mnx[, c('ID','MetID')]
colnames(rxn_met_new) <- c('ID','MNXID')
rxn_met_new2 <- met_biocyc[, c('ID','MetID')]
colnames(rxn_met_new2) <- c('ID','MNXID')
rxn_met_new3 <- met_kegg[, c('ID','MetID')]
colnames(rxn_met_new3) <- c('ID','MNXID')
rxn_met_new_all <- rbind.data.frame(rxn_met_new, rxn_met_new2, rxn_met_new3)
rxn_met_mix <- rbind.data.frame(rxn_met_yeast8, rxn_met_new, rxn_met_new2, rxn_met_new3)
all_new_metID <- setdiff(rxn_met_new_all$MNXID, rxn_met_yeast8$MNXID)
all_metID <- union(rxn_met_new_all$MNXID, rxn_met_yeast8$MNXID)
# calculate how many reactions connect with each new metabolites
rxn_num_of_met <- data.frame(MNXID=all_metID, stringsAsFactors = FALSE)
for (i in 1:nrow(rxn_num_of_met)){
print(i)
m0 <- rxn_num_of_met$MNXID[i]
rxn0 <- rxn_met_mix[rxn_met_mix$MNXID==m0, ]
num0 <- length(unique(rxn0$ID))
rxn_num_of_met$rxn_num[i] <- num0
}
rxn_num_of_met$type[rxn_num_of_met$MNXID %in% all_new_metID] <- 'metabolite_new'
rxn_num_of_met$type[!(rxn_num_of_met$MNXID %in% all_new_metID)] <- 'metabolite_Yeast8'
#here for the metabolite only occured in one new reaction is defined as potential dead-end met
dead_end_met <-filter(rxn_num_of_met, rxn_num == 1 & type=='metabolite_new')
# calculate the number of dead_end_met from each new reactions
new_rxn_all <- data.frame(rxnID = unique(rxn_met_new_all$ID), stringsAsFactors = FALSE)
for (i in 1: nrow(new_rxn_all)){
r0 <- new_rxn_all$rxnID[i]
rxn_met0 <- filter(rxn_met_new_all, ID==r0)
met0 <- unique(rxn_met0$MNXID)
dead_met_num <- length(which(met0 %in% dead_end_met$MNXID ==TRUE))
new_rxn_all$dead_met_num[i] <- dead_met_num
}
# then we can integrate the dead end metabolite number informatin with the refined new rxn informatiion
union_rxn_mnx_refine$dead_met_num <- getSingleReactionFormula(new_rxn_all$dead_met_num,new_rxn_all$rxnID,union_rxn_mnx_refine$rxnID)
union_rxn_kegg_refine$dead_met_num <- getSingleReactionFormula(new_rxn_all$dead_met_num,new_rxn_all$rxnID,union_rxn_kegg_refine$rxnID)
union_rxn_biocyc_refine$dead_met_num <- getSingleReactionFormula(new_rxn_all$dead_met_num,new_rxn_all$rxnID,union_rxn_biocyc_refine$rxnID)
# step 4
# summarize the current panYeast reactions and choose the common reactions sets
reportRxnPanYeast <- parseReportedPanYeast()
rxn_common <- intersect(union_rxn_mnx$rxnID, reportRxnPanYeast)
union_rxn_mnx_refine$exist_panYeast <- union_rxn_mnx_refine$rxnID %in% rxn_common
# step 5
# remove some reactions with dead end metabolite or just choose the reactions existing in history panYeast
union_rxn_mnx_refine <- filter(union_rxn_mnx_refine, dead_met_num <=0 | exist_panYeast == TRUE)
union_rxn_kegg_refine <- filter(union_rxn_kegg_refine, dead_met_num <=0 )
union_rxn_biocyc_refine <- filter(union_rxn_biocyc_refine, dead_met_num <=0 )
met_mnx_refine <- met_mnx[met_mnx$ID %in% union_rxn_mnx_refine$rxnID, ]
met_kegg_refine <- met_kegg[met_kegg$ID %in% union_rxn_kegg_refine$rxnID, ]
met_biocyc_refine <- met_biocyc[met_biocyc$ID %in% union_rxn_biocyc_refine$rxnID, ]
write.table(union_rxn_mnx_refine, "result/new rxn information from MNX database.txt", row.names = FALSE, sep = "\t")
write.table(met_mnx_refine, "result/new met information from MNX database.txt", row.names = FALSE, sep = "\t")
# potential dead end metabolite analysis
# ----------------------------
ggplot(filter(rxn_num_of_met, rxn_num < 25), aes(rxn_num, fill = type, colour = type)) +
geom_density(alpha = 0.1) +
labs(x='rxn number connected with each metabolite') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=15, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", colour = "black", size = 1)) +
theme(legend.position = c(0.8, 0.2))
# dead end met annotation
colnames(dead_end_met) <- c('MetID','rxn_num','type')
View(union_rxn_kegg_refine)
View(union_rxn_biocyc_refine)
View(met_kegg_refine)
View(union_rxn_biocyc_refine)
View(met_biocyc_refine)
View(met_mnx_refine)
View(met_mnx_refine)
# Compare the original s288c reactions from different sources: RAVEN, kegg
# Revised by Hongzhong 2019-8-10
# load library
library(readxl)
library(stringr)
library(tidyverse)
library(hongR)
source('function_general.R')
genome_yeasts <- read_excel("data/genome_summary_332_yeasts.xlsx")
strain_index <- read_excel("data/332taxa_index.xlsx")
genome_yeasts$genomeID <- getSingleReactionFormula(strain_index$original_genome_id, strain_index$old_speceis_names,genome_yeasts$old_species_id)
#---------------------------------------------------
# RAVEN biocyc
gene_all <- vector()
rxn_all <- vector()
strain <- list.files('data/strain specific model from RAVEN_biocyc_55_110')
for (i in strain) {
print(i)
#i <- "biocyc_panYeast2_45_100"
inputfile <- paste('data/strain specific model from RAVEN_biocyc_55_110/',i, '/excelGenes.txt', sep = "")
inputfile2 <- paste('data/strain specific model from RAVEN_biocyc_55_110/',i, '/excelRxns.txt', sep = "")
gene_biocyc <- read.table(inputfile, header =FALSE, sep = "\t", stringsAsFactors = FALSE)
gene <- length(unique(gene_biocyc$V2))
rxn_biocyc <- read_table2(inputfile2)
rxn <- length(unique(rxn_biocyc$`#`))
#save the result
gene_all <- c(gene_all, gene)
rxn_all <- c(rxn_all, rxn)
}
summary_paramter <- data.frame(strain = strain, gene=gene_all, rxn= rxn_all, stringsAsFactors = FALSE)
summary_paramter$gene <- as.numeric(summary_paramter$gene)
summary_paramter$rxn <- as.numeric(summary_paramter$rxn)
View(summary_paramter)
View(genome_yeasts)
summary_paramter <- data.frame(strain = strain, gene=gene_all, rxn= rxn_all, stringsAsFactors = FALSE)
summary_paramter$gene <- as.numeric(summary_paramter$gene)
summary_paramter$rxn <- as.numeric(summary_paramter$rxn)
summary_paramter <- data.frame(strain = strain, gene=gene_all, rxn= rxn_all, stringsAsFactors = FALSE)
summary_paramter$gene <- as.numeric(summary_paramter$gene)
summary_paramter$rxn <- as.numeric(summary_paramter$rxn)
summary_paramter$genome_size <- getSingleReactionFormula(genome_yeasts$`Assembly size`, genome_yeasts$genomeID,summary_paramter$strain)
summary_paramter$genome_size <- as.numeric(summary_paramter$genome_size)
# plot
plot(density(summary_paramter$gene))
plot(density(summary_paramter$rxn))
plot(summary_paramter$gene, summary_paramter$rxn)
plot(summary_paramter$genome_size, summary_paramter$rxn, xlab = 'Genome size', ylab = "Rxn number_biocyc")
plot(summary_paramter$genome_size, summary_paramter$gene, xlab = 'Genome size', ylab = "Gene number_biocyc")
# plot of high quality
plotDensityGraph(data_frame=summary_paramter, para = "gene", xlab_name='Metabolic gene number_biocyc')
plotDensityGraph(data_frame=summary_paramter, para = "rxn", xlab_name='Metabolic rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
summary_paramter <- data.frame(strain = strain, gene=gene_all, rxn= rxn_all, stringsAsFactors = FALSE)
summary_paramter$gene <- as.numeric(summary_paramter$gene)
summary_paramter$rxn <- as.numeric(summary_paramter$rxn)
summary_paramter$genome_size <- getSingleReactionFormula(genome_yeasts$N50, genome_yeasts$genomeID,summary_paramter$strain)
summary_paramter$genome_size <- as.numeric(summary_paramter$genome_size)
# plot
plot(density(summary_paramter$gene))
plot(density(summary_paramter$rxn))
plot(summary_paramter$gene, summary_paramter$rxn)
plot(summary_paramter$genome_size, summary_paramter$rxn, xlab = 'Genome size', ylab = "Rxn number_biocyc")
plot(summary_paramter$genome_size, summary_paramter$gene, xlab = 'Genome size', ylab = "Gene number_biocyc")
# plot of high quality
plotDensityGraph(data_frame=summary_paramter, para = "gene", xlab_name='Metabolic gene number_biocyc')
plotDensityGraph(data_frame=summary_paramter, para = "rxn", xlab_name='Metabolic rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
summary_paramter <- data.frame(strain = strain, gene=gene_all, rxn= rxn_all, stringsAsFactors = FALSE)
summary_paramter$gene <- as.numeric(summary_paramter$gene)
summary_paramter$rxn <- as.numeric(summary_paramter$rxn)
summary_paramter$genome_size <- getSingleReactionFormula(genome_yeasts$`No. genes`, genome_yeasts$genomeID,summary_paramter$strain)
summary_paramter$genome_size <- as.numeric(summary_paramter$genome_size)
# plot
plot(density(summary_paramter$gene))
plot(density(summary_paramter$rxn))
plot(summary_paramter$gene, summary_paramter$rxn)
plot(summary_paramter$genome_size, summary_paramter$rxn, xlab = 'Genome size', ylab = "Rxn number_biocyc")
plot(summary_paramter$genome_size, summary_paramter$gene, xlab = 'Genome size', ylab = "Gene number_biocyc")
# plot of high quality
plotDensityGraph(data_frame=summary_paramter, para = "gene", xlab_name='Metabolic gene number_biocyc')
plotDensityGraph(data_frame=summary_paramter, para = "rxn", xlab_name='Metabolic rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
View(genome_yeasts)
summary_paramter <- data.frame(strain = strain, gene=gene_all, rxn= rxn_all, stringsAsFactors = FALSE)
summary_paramter$gene <- as.numeric(summary_paramter$gene)
summary_paramter$rxn <- as.numeric(summary_paramter$rxn)
summary_paramter$genome_size <- getSingleReactionFormula(genome_yeasts$`No. genes`, genome_yeasts$genomeID,summary_paramter$strain)
summary_paramter$genome_size <- as.numeric(summary_paramter$genome_size)
# plot
plot(density(summary_paramter$gene))
plot(density(summary_paramter$rxn))
plot(summary_paramter$gene, summary_paramter$rxn)
plot(summary_paramter$genome_size, summary_paramter$rxn, xlab = 'Genome size', ylab = "Rxn number_biocyc")
plot(summary_paramter$genome_size, summary_paramter$gene, xlab = 'Genome size', ylab = "Gene number_biocyc")
# plot of high quality
plotDensityGraph(data_frame=summary_paramter, para = "gene", xlab_name='Metabolic gene number_biocyc')
plotDensityGraph(data_frame=summary_paramter, para = "rxn", xlab_name='Metabolic rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'rxn', xlab_name='Genome size', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'genome_size', paraY = 'gene', xlab_name='Genome size', ylab_name='Metabolic gene_biocyc')
# Compare the original s288c reactions from different sources: RAVEN, kegg
# Revised by Hongzhong 2019-8-10
# load library
library(readxl)
library(stringr)
library(tidyverse)
library(hongR)
source('function_general.R')
genome_yeasts <- read_excel("data/genome_summary_332_yeasts.xlsx")
strain_index <- read_excel("data/332taxa_index.xlsx")
genome_yeasts$genomeID <- getSingleReactionFormula(strain_index$original_genome_id, strain_index$old_speceis_names,genome_yeasts$old_species_id)
#---------------------------------------------------
# RAVEN biocyc
gene_all <- vector()
rxn_all <- vector()
strain <- list.files('data/strain specific model from RAVEN_biocyc_55_110')
for (i in strain) {
print(i)
#i <- "biocyc_panYeast2_45_100"
inputfile <- paste('data/strain specific model from RAVEN_biocyc_55_110/',i, '/excelGenes.txt', sep = "")
inputfile2 <- paste('data/strain specific model from RAVEN_biocyc_55_110/',i, '/excelRxns.txt', sep = "")
gene_biocyc <- read.table(inputfile, header =FALSE, sep = "\t", stringsAsFactors = FALSE)
gene <- length(unique(gene_biocyc$V2))
rxn_biocyc <- read_table2(inputfile2)
rxn <- length(unique(rxn_biocyc$`#`))
#save the result
gene_all <- c(gene_all, gene)
rxn_all <- c(rxn_all, rxn)
}
summary_paramter <- data.frame(strain = strain, gene=gene_all, rxn= rxn_all, stringsAsFactors = FALSE)
summary_paramter$gene <- as.numeric(summary_paramter$gene)
summary_paramter$rxn <- as.numeric(summary_paramter$rxn)
summary_paramter$gene_set <- getSingleReactionFormula(genome_yeasts$`No. genes`, genome_yeasts$genomeID,summary_paramter$strain)
summary_paramter$gene_set <- as.numeric(summary_paramter$gene_set)
# plot
plot(density(summary_paramter$gene))
plot(density(summary_paramter$rxn))
plot(summary_paramter$gene, summary_paramter$rxn)
plot(summary_paramter$gene_set, summary_paramter$rxn, xlab = 'Gene set', ylab = "Rxn number_biocyc")
plot(summary_paramter$gene_set, summary_paramter$gene, xlab = 'Gene set', ylab = "Gene number_biocyc")
# plot of high quality
plotDensityGraph(data_frame=summary_paramter, para = "gene", xlab_name='Metabolic gene number_biocyc')
plotDensityGraph(data_frame=summary_paramter, para = "rxn", xlab_name='Metabolic rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'gene_set', paraY = 'rxn', xlab_name='Gene set', ylab_name='rxn number_biocyc')
plotXYdotGraph(data_frame=summary_paramter, paraX = 'gene_set', paraY = 'gene', xlab_name='Gene set', ylab_name='Metabolic gene_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'gene', paraY = 'rxn', xlab_name='Metabolic gene number_biocyc', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'gene_set', paraY = 'rxn', xlab_name='Gene set', ylab_name='rxn number_biocyc')
plotXYdotGraph2(data_frame=summary_paramter, paraX = 'gene_set', paraY = 'gene', xlab_name='Gene set', ylab_name='Metabolic gene_biocyc')
plot(genome_yeasts$`Assembly size`, genome_yeasts$`No. genes`, xlab = 'Genome size (bp)', ylab = "protein coding genes (count)")
plotXYdotGraph(data_frame=genome_yeasts, paraX = 'Assembly size', paraY = 'No. genes', xlab_name='Genome size (bp)', ylab_name='Protein coding genes (count)')
plotXYdotGraph(data_frame=genome_yeasts, paraX = 'Assembly size', paraY = 'No. genes', xlab_name='Genome size (bp)', ylab_name='Protein coding genes (count)')
# plot
plot(genome_yeasts$`Assembly size`, genome_yeasts$`No. genes`, xlab = 'Genome size (bp)', ylab = "Protein coding genes (count)")
genome_yeasts0 <- data.frame(x=genome_yeasts$`Assembly size`, y=genome_yeasts$`No. genes`, stringsAsFactors = FALSE)
View(genome_yeasts0)
plotXYdotGraph(data_frame=genome_yeasts0, paraX = 'x', paraY = 'y', xlab_name='Genome size (bp)', ylab_name='Protein coding genes (count)')
# plot
plot(genome_yeasts$`Assembly size`, genome_yeasts$`No. genes`, xlab = 'Genome size (bp)', ylab = "Gene set")
genome_yeasts0 <- data.frame(x=genome_yeasts$`Assembly size`, y=genome_yeasts$`No. genes`, stringsAsFactors = FALSE)
plotXYdotGraph(data_frame=genome_yeasts0, paraX = 'x', paraY = 'y', xlab_name='Genome size (bp)', ylab_name='Gene set')
View(genome_yeasts)
